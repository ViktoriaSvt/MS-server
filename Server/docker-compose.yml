services:
  questions:
    build:
      context: ./Questions
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/SkytalesOfficial?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1kilosafrid
    depends_on:
      - mysql
    networks:
      - server_default
    container_name: question-service

  auth:
    build:
      context: ./Auth
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/SkytalesOfficial?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1kilosafrid
      SECURITY_JWT_SECRETKEY: yJhY2zA6WxVr8PqWNxQtbk5U4v3iSz1A7ghz6j9kPZJXy9U2w
      SECURITY_JWT_EXPIRATIONTIME: 86400000
    depends_on:
      - mysql
    networks:
      - server_default
    container_name: auth-service

  library:
    build:
      context: ./Library
    container_name: library-service
    depends_on:
      - mysql
      - kafka
      - elasticsearch
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/SkytalesOfficial?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1kilosafrid
      spring.application.name: Library
      server.address: 0.0.0.0
      server.port: 8085
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
      spring.jpa.hibernate.ddl-auto: update
      spring.datasource.driverClassName: com.mysql.cj.jdbc.Driver
      spring.kafka.bootstrap-servers: kafka:9092
      logging.level.org.apache.kafka: ERROR
      logging.level.org.springframework.kafka: ERROR
      logging.level.kafka: WARN
      SPRING_ELASTICSEARCH_REST_URIS: http://elasticsearch:9200
    networks:
      - server_default

  payments:
    build:
      context: ./Payments
    container_name: payments-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/SkytalesOfficial?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1kilosafrid
      spring.application.name: Payments
      server.port: 8083
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
      spring.jpa.hibernate.ddl-auto: update
      spring.datasource.driverClassName: com.mysql.cj.jdbc.Driver
      spring.kafka.bootstrap-servers: kafka:9092
      stripe.secret.key: sk_test_51QcrYKJdrx2Bl88huhlvnfqPxrqBmfo9BM6wxg0mlYJugCMEpw9CHlspF8I9tTEzL0gq9NeWcFTNCEoLgDjMTbfu00idvkIYJK
    depends_on:
      - mysql
      - kafka
    networks:
      - server_default

  carts:
    build:
      context: ./Carts
    container_name: carts-service
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/SkytalesOfficial?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1kilosafrid
      spring.application.name: Carts
      server.address: 0.0.0.0
      server.port: 8086
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
      spring.jpa.hibernate.ddl-auto: update
      spring.datasource.driverClassName: com.mysql.cj.jdbc.Driver
      spring.kafka.bootstrap-servers: kafka:9092
      spring.security.user.name: ViktoriaS10
      spring.security.user.password: 1kilosafrid
      spring.data.redis.host: "redis"
      spring.data.redis.port: 6379
    depends_on:
      - mysql
      - kafka
      - redis
    networks:
      - server_default

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: '1kilosafrid'
      MYSQL_DATABASE: SkytalesOfficial
      MYSQL_PASSWORD: '1kilosafrid'
    container_name: mysql
    ports:
      - "3306:3306"
    networks:
      - server_default
    volumes:
      - mysql-data:/var/lib/mysql

  redis:
    image: redis:alpine
    container_name: redis-service
    ports:
      - "6379:6379"
    volumes:
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - server_default

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka-service
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "book-updates:1:1"
    ports:
      - "9092:9092"
    networks:
      - server_default

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper-service
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - server_default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: elasticsearch-service
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=your_random_secure_password
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - server_default
    volumes:
      - es-data:/usr/share/elasticsearch/data

  openresty:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: openresty-service
    ports:
      - "8081:8081"
    volumes:
      - ./openresty/luarocks/.luarocks/share/lua/5.1:/usr/local/openresty/lua
      - ./openresty/luarocks/.luarocks/lib/lua/5.1:/usr/local/openresty/lua_lib
      - ./openresty/luarocks/.luarocks/share/lua/5.1/resty/jwt:/usr/local/openresty/lua/resty/jwt
      - ./openresty/conf/lua:/usr/local/openresty/lua
    depends_on:
      - redis
    networks:
      - server_default

networks:
  server_default:
    driver: bridge

volumes:
  mysql-data:
  es-data:
